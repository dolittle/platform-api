// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	storage "github.com/dolittle/platform-api/pkg/platform/storage"
	mock "github.com/stretchr/testify/mock"
)

// RepoApplication is an autogenerated mock type for the RepoApplication type
type RepoApplication struct {
	mock.Mock
}

// GetApplication provides a mock function with given fields: customerID, applicationID
func (_m *RepoApplication) GetApplication(customerID string, applicationID string) (storage.JSONApplication, error) {
	ret := _m.Called(customerID, applicationID)

	var r0 storage.JSONApplication
	if rf, ok := ret.Get(0).(func(string, string) storage.JSONApplication); ok {
		r0 = rf(customerID, applicationID)
	} else {
		r0 = ret.Get(0).(storage.JSONApplication)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(customerID, applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplications provides a mock function with given fields: customerID
func (_m *RepoApplication) GetApplications(customerID string) ([]storage.JSONApplication, error) {
	ret := _m.Called(customerID)

	var r0 []storage.JSONApplication
	if rf, ok := ret.Get(0).(func(string) []storage.JSONApplication); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.JSONApplication)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveApplication provides a mock function with given fields: application
func (_m *RepoApplication) SaveApplication(application storage.JSONApplication) error {
	ret := _m.Called(application)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.JSONApplication) error); ok {
		r0 = rf(application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
