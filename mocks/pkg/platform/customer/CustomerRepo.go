// Code generated by mockery v2.12.2. DO NOT EDIT.

package customer

import (
	platform "github.com/dolittle/platform-api/pkg/platform"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/dolittle/platform-api/pkg/platform/storage"

	testing "testing"
)

// CustomerRepo is an autogenerated mock type for the CustomerRepo type
type CustomerRepo struct {
	mock.Mock
}

// GetApplications provides a mock function with given fields: customerID
func (_m *CustomerRepo) GetApplications(customerID string) ([]storage.JSONApplication, error) {
	ret := _m.Called(customerID)

	var r0 []storage.JSONApplication
	if rf, ok := ret.Get(0).(func(string) []storage.JSONApplication); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.JSONApplication)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomers provides a mock function with given fields:
func (_m *CustomerRepo) GetCustomers() ([]platform.Customer, error) {
	ret := _m.Called()

	var r0 []platform.Customer
	if rf, ok := ret.Get(0).(func() []platform.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platform.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudioConfig provides a mock function with given fields: customerID
func (_m *CustomerRepo) GetStudioConfig(customerID string) (platform.StudioConfig, error) {
	ret := _m.Called(customerID)

	var r0 platform.StudioConfig
	if rf, ok := ret.Get(0).(func(string) platform.StudioConfig); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(platform.StudioConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCustomer provides a mock function with given fields: customer
func (_m *CustomerRepo) SaveCustomer(customer storage.JSONCustomer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.JSONCustomer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCustomerRepo creates a new instance of CustomerRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerRepo(t testing.TB) *CustomerRepo {
	mock := &CustomerRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
