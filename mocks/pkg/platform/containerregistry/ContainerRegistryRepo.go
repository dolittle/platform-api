// Code generated by mockery v2.12.2. DO NOT EDIT.

package containerregistry

import (
	testing "testing"

	platformcontainerregistry "github.com/dolittle/platform-api/pkg/platform/containerregistry"
	mock "github.com/stretchr/testify/mock"
)

// ContainerRegistryRepo is an autogenerated mock type for the ContainerRegistryRepo type
type ContainerRegistryRepo struct {
	mock.Mock
}

// GetImages provides a mock function with given fields: credentials
func (_m *ContainerRegistryRepo) GetImages(credentials platformcontainerregistry.ContainerRegistryCredentials) ([]string, error) {
	ret := _m.Called(credentials)

	var r0 []string
	if rf, ok := ret.Get(0).(func(platformcontainerregistry.ContainerRegistryCredentials) []string); ok {
		r0 = rf(credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(platformcontainerregistry.ContainerRegistryCredentials) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: credentials, image
func (_m *ContainerRegistryRepo) GetTags(credentials platformcontainerregistry.ContainerRegistryCredentials, image string) ([]string, error) {
	ret := _m.Called(credentials, image)

	var r0 []string
	if rf, ok := ret.Get(0).(func(platformcontainerregistry.ContainerRegistryCredentials, string) []string); ok {
		r0 = rf(credentials, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(platformcontainerregistry.ContainerRegistryCredentials, string) error); ok {
		r1 = rf(credentials, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContainerRegistryRepo creates a new instance of ContainerRegistryRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewContainerRegistryRepo(t testing.TB) *ContainerRegistryRepo {
	mock := &ContainerRegistryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
