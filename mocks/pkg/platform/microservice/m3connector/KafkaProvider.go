// Code generated by mockery v2.12.2. DO NOT EDIT.

package m3connector

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// KafkaProvider is an autogenerated mock type for the KafkaProvider type
type KafkaProvider struct {
	mock.Mock
}

// AddACL provides a mock function with given fields: topic, username, permission
func (_m *KafkaProvider) AddACL(topic string, username string, permission string) error {
	ret := _m.Called(topic, username, permission)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(topic, username, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTopic provides a mock function with given fields: topic, retentionMs
func (_m *KafkaProvider) CreateTopic(topic string, retentionMs int64) error {
	ret := _m.Called(topic, retentionMs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(topic, retentionMs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBrokerUrl provides a mock function with given fields:
func (_m *KafkaProvider) GetBrokerUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCertificateAuthority provides a mock function with given fields:
func (_m *KafkaProvider) GetCertificateAuthority() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOrCreateUser provides a mock function with given fields: username
func (_m *KafkaProvider) GetOrCreateUser(username string) (string, string, error) {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewKafkaProvider creates a new instance of KafkaProvider. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewKafkaProvider(t testing.TB) *KafkaProvider {
	mock := &KafkaProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
