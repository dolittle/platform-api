// Code generated by mockery v2.12.2. DO NOT EDIT.

package m3connector

import (
	microservicem3connector "github.com/dolittle/platform-api/pkg/platform/microservice/m3connector"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// K8sRepo is an autogenerated mock type for the K8sRepo type
type K8sRepo struct {
	mock.Mock
}

// UpsertKafkaFiles provides a mock function with given fields: applicationID, environment, kafkaFiles
func (_m *K8sRepo) UpsertKafkaFiles(applicationID string, environment string, kafkaFiles microservicem3connector.KafkaFiles) error {
	ret := _m.Called(applicationID, environment, kafkaFiles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, microservicem3connector.KafkaFiles) error); ok {
		r0 = rf(applicationID, environment, kafkaFiles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewK8sRepo creates a new instance of K8sRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewK8sRepo(t testing.TB) *K8sRepo {
	mock := &K8sRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
