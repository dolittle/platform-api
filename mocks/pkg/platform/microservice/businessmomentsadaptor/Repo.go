// Code generated by mockery v2.12.2. DO NOT EDIT.

package businessmomentsadaptor

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// GetBusinessMomentsConfigmap provides a mock function with given fields: applicationID, environment, microserviceID
func (_m *Repo) GetBusinessMomentsConfigmap(applicationID string, environment string, microserviceID string) (v1.ConfigMap, error) {
	ret := _m.Called(applicationID, environment, microserviceID)

	var r0 v1.ConfigMap
	if rf, ok := ret.Get(0).(func(string, string, string) v1.ConfigMap); ok {
		r0 = rf(applicationID, environment, microserviceID)
	} else {
		r0 = ret.Get(0).(v1.ConfigMap)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(applicationID, environment, microserviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBusinessMomentsConfigmap provides a mock function with given fields: newConfigmap, data
func (_m *Repo) SaveBusinessMomentsConfigmap(newConfigmap v1.ConfigMap, data []byte) error {
	ret := _m.Called(newConfigmap, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(v1.ConfigMap, []byte) error); ok {
		r0 = rf(newConfigmap, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepo(t testing.TB) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
