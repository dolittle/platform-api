// Code generated by mockery v2.12.2. DO NOT EDIT.

package simple

import (
	k8s "github.com/dolittle/platform-api/pkg/dolittle/k8s"

	mock "github.com/stretchr/testify/mock"

	platform "github.com/dolittle/platform-api/pkg/platform"

	testing "testing"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// Create provides a mock function with given fields: namespace, tenant, application, customerTenants, input
func (_m *Repo) Create(namespace string, tenant k8s.Tenant, application k8s.Application, customerTenants []platform.CustomerTenantInfo, input platform.HttpInputSimpleInfo) error {
	ret := _m.Called(namespace, tenant, application, customerTenants, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, k8s.Tenant, k8s.Application, []platform.CustomerTenantInfo, platform.HttpInputSimpleInfo) error); ok {
		r0 = rf(namespace, tenant, application, customerTenants, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: applicationID, environment, microserviceID
func (_m *Repo) Delete(applicationID string, environment string, microserviceID string) error {
	ret := _m.Called(applicationID, environment, microserviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(applicationID, environment, microserviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: customerID, applicationID, environment, microserviceID, tenantID, producerMicroserviceID, producerTenantID, publicStream, partition, scope
func (_m *Repo) Subscribe(customerID string, applicationID string, environment string, microserviceID string, tenantID string, producerMicroserviceID string, producerTenantID string, publicStream string, partition string, scope string) error {
	ret := _m.Called(customerID, applicationID, environment, microserviceID, tenantID, producerMicroserviceID, producerTenantID, publicStream, partition, scope)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, string, string) error); ok {
		r0 = rf(customerID, applicationID, environment, microserviceID, tenantID, producerMicroserviceID, producerTenantID, publicStream, partition, scope)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToAnotherApplication provides a mock function with given fields: customerID, applicationID, environment, microserviceID, tenantID, producerMicroserviceID, producerTenantID, publicStream, partition, scope, producerApplicationID, producerEnvironment
func (_m *Repo) SubscribeToAnotherApplication(customerID string, applicationID string, environment string, microserviceID string, tenantID string, producerMicroserviceID string, producerTenantID string, publicStream string, partition string, scope string, producerApplicationID string, producerEnvironment string) error {
	ret := _m.Called(customerID, applicationID, environment, microserviceID, tenantID, producerMicroserviceID, producerTenantID, publicStream, partition, scope, producerApplicationID, producerEnvironment)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, string, string, string, string) error); ok {
		r0 = rf(customerID, applicationID, environment, microserviceID, tenantID, producerMicroserviceID, producerTenantID, publicStream, partition, scope, producerApplicationID, producerEnvironment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepo(t testing.TB) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
