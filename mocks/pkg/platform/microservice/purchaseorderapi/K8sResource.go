// Code generated by mockery v2.12.2. DO NOT EDIT.

package purchaseorderapi

import (
	context "context"

	k8s "github.com/dolittle/platform-api/pkg/dolittle/k8s"

	mock "github.com/stretchr/testify/mock"

	platform "github.com/dolittle/platform-api/pkg/platform"

	testing "testing"
)

// K8sResource is an autogenerated mock type for the K8sResource type
type K8sResource struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, namspace, headImage, runtimeImage, k8sMicroservice, customerTenants, extra
func (_m *K8sResource) Create(ctx context.Context, namspace string, headImage string, runtimeImage string, k8sMicroservice k8s.Microservice, customerTenants []platform.CustomerTenantInfo, extra platform.HttpInputPurchaseOrderExtra) error {
	ret := _m.Called(ctx, namspace, headImage, runtimeImage, k8sMicroservice, customerTenants, extra)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, k8s.Microservice, []platform.CustomerTenantInfo, platform.HttpInputPurchaseOrderExtra) error); ok {
		r0 = rf(ctx, namspace, headImage, runtimeImage, k8sMicroservice, customerTenants, extra)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, applicationID, environment, microserviceID
func (_m *K8sResource) Delete(ctx context.Context, applicationID string, environment string, microserviceID string) error {
	ret := _m.Called(ctx, applicationID, environment, microserviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, applicationID, environment, microserviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewK8sResource creates a new instance of K8sResource. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewK8sResource(t testing.TB) *K8sResource {
	mock := &K8sResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
