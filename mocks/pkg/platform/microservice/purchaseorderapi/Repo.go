// Code generated by mockery v2.9.4. DO NOT EDIT.

package purchaseorderapi

import (
	k8s "github.com/dolittle/platform-api/pkg/dolittle/k8s"
	mock "github.com/stretchr/testify/mock"

	platform "github.com/dolittle/platform-api/pkg/platform"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// Create provides a mock function with given fields: namespace, customer, application, customerTenants, input
func (_m *Repo) Create(namespace string, customer k8s.Tenant, application k8s.Application, customerTenants []platform.CustomerTenantInfo, input platform.HttpInputPurchaseOrderInfo) error {
	ret := _m.Called(namespace, customer, application, customerTenants, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, k8s.Tenant, k8s.Application, []platform.CustomerTenantInfo, platform.HttpInputPurchaseOrderInfo) error); ok {
		r0 = rf(namespace, customer, application, customerTenants, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: applicationID, environment, microserviceID
func (_m *Repo) Delete(applicationID string, environment string, microserviceID string) error {
	ret := _m.Called(applicationID, environment, microserviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(applicationID, environment, microserviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnvironmentHasPurchaseOrderAPI provides a mock function with given fields: namespace, input
func (_m *Repo) EnvironmentHasPurchaseOrderAPI(namespace string, input platform.HttpInputPurchaseOrderInfo) (bool, error) {
	ret := _m.Called(namespace, input)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, platform.HttpInputPurchaseOrderInfo) bool); ok {
		r0 = rf(namespace, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, platform.HttpInputPurchaseOrderInfo) error); ok {
		r1 = rf(namespace, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: namespace, customer, application, customerTenants, input
func (_m *Repo) Exists(namespace string, customer k8s.Tenant, application k8s.Application, customerTenants []platform.CustomerTenantInfo, input platform.HttpInputPurchaseOrderInfo) (bool, error) {
	ret := _m.Called(namespace, customer, application, customerTenants, input)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, k8s.Tenant, k8s.Application, []platform.CustomerTenantInfo, platform.HttpInputPurchaseOrderInfo) bool); ok {
		r0 = rf(namespace, customer, application, customerTenants, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, k8s.Tenant, k8s.Application, []platform.CustomerTenantInfo, platform.HttpInputPurchaseOrderInfo) error); ok {
		r1 = rf(namespace, customer, application, customerTenants, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
