// Code generated by mockery v2.14.0. DO NOT EDIT.

package storage

import (
	platform "github.com/dolittle/platform-api/pkg/platform"
	platformstorage "github.com/dolittle/platform-api/pkg/platform/storage"
	mock "github.com/stretchr/testify/mock"
)

// RepoCustomerTenants is an autogenerated mock type for the RepoCustomerTenants type
type RepoCustomerTenants struct {
	mock.Mock
}

// GetCustomerTenants provides a mock function with given fields: application
func (_m *RepoCustomerTenants) GetCustomerTenants(application platformstorage.JSONApplication) []platform.CustomerTenantInfo {
	ret := _m.Called(application)

	var r0 []platform.CustomerTenantInfo
	if rf, ok := ret.Get(0).(func(platformstorage.JSONApplication) []platform.CustomerTenantInfo); ok {
		r0 = rf(application)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platform.CustomerTenantInfo)
		}
	}

	return r0
}

// GetCustomerTenantsByEnvironment provides a mock function with given fields: application, environment
func (_m *RepoCustomerTenants) GetCustomerTenantsByEnvironment(application platformstorage.JSONApplication, environment string) []platform.CustomerTenantInfo {
	ret := _m.Called(application, environment)

	var r0 []platform.CustomerTenantInfo
	if rf, ok := ret.Get(0).(func(platformstorage.JSONApplication, string) []platform.CustomerTenantInfo); ok {
		r0 = rf(application, environment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platform.CustomerTenantInfo)
		}
	}

	return r0
}

type mockConstructorTestingTNewRepoCustomerTenants interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoCustomerTenants creates a new instance of RepoCustomerTenants. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoCustomerTenants(t mockConstructorTestingTNewRepoCustomerTenants) *RepoCustomerTenants {
	mock := &RepoCustomerTenants{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
