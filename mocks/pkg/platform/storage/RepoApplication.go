// Code generated by mockery v2.12.2. DO NOT EDIT.

package storage

import (
	testing "testing"

	platformstorage "github.com/dolittle/platform-api/pkg/platform/storage"
	mock "github.com/stretchr/testify/mock"
)

// RepoApplication is an autogenerated mock type for the RepoApplication type
type RepoApplication struct {
	mock.Mock
}

// GetApplication provides a mock function with given fields: customerID, applicationID
func (_m *RepoApplication) GetApplication(customerID string, applicationID string) (platformstorage.JSONApplication, error) {
	ret := _m.Called(customerID, applicationID)

	var r0 platformstorage.JSONApplication
	if rf, ok := ret.Get(0).(func(string, string) platformstorage.JSONApplication); ok {
		r0 = rf(customerID, applicationID)
	} else {
		r0 = ret.Get(0).(platformstorage.JSONApplication)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(customerID, applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplications provides a mock function with given fields: customerID
func (_m *RepoApplication) GetApplications(customerID string) ([]platformstorage.JSONApplication, error) {
	ret := _m.Called(customerID)

	var r0 []platformstorage.JSONApplication
	if rf, ok := ret.Get(0).(func(string) []platformstorage.JSONApplication); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platformstorage.JSONApplication)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveApplication provides a mock function with given fields: application
func (_m *RepoApplication) SaveApplication(application platformstorage.JSONApplication) error {
	ret := _m.Called(application)

	var r0 error
	if rf, ok := ret.Get(0).(func(platformstorage.JSONApplication) error); ok {
		r0 = rf(application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepoApplication creates a new instance of RepoApplication. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoApplication(t testing.TB) *RepoApplication {
	mock := &RepoApplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
