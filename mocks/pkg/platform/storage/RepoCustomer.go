// Code generated by mockery v2.14.0. DO NOT EDIT.

package storage

import (
	platform "github.com/dolittle/platform-api/pkg/platform"
	platformstorage "github.com/dolittle/platform-api/pkg/platform/storage"
	mock "github.com/stretchr/testify/mock"
)

// RepoCustomer is an autogenerated mock type for the RepoCustomer type
type RepoCustomer struct {
	mock.Mock
}

// GetCustomers provides a mock function with given fields:
func (_m *RepoCustomer) GetCustomers() ([]platform.Customer, error) {
	ret := _m.Called()

	var r0 []platform.Customer
	if rf, ok := ret.Get(0).(func() []platform.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platform.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCustomer provides a mock function with given fields: customer
func (_m *RepoCustomer) SaveCustomer(customer platformstorage.JSONCustomer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(platformstorage.JSONCustomer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepoCustomer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoCustomer creates a new instance of RepoCustomer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoCustomer(t mockConstructorTestingTNewRepoCustomer) *RepoCustomer {
	mock := &RepoCustomer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
