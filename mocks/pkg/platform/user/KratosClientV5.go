// Code generated by mockery v2.14.0. DO NOT EDIT.

package user

import (
	platformuser "github.com/dolittle/platform-api/pkg/platform/user"
	mock "github.com/stretchr/testify/mock"
)

// KratosClientV5 is an autogenerated mock type for the KratosClientV5 type
type KratosClientV5 struct {
	mock.Mock
}

// AddCustomerToUser provides a mock function with given fields: user, customerID
func (_m *KratosClientV5) AddCustomerToUser(user platformuser.KratosUser, customerID string) error {
	ret := _m.Called(user, customerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(platformuser.KratosUser, string) error); ok {
		r0 = rf(user, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCustomerToUserByEmail provides a mock function with given fields: email, customerID
func (_m *KratosClientV5) AddCustomerToUserByEmail(email string, customerID string) error {
	ret := _m.Called(email, customerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCustomerToUserByUserID provides a mock function with given fields: userID, customerID
func (_m *KratosClientV5) AddCustomerToUserByUserID(userID string, customerID string) error {
	ret := _m.Called(userID, customerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: id
func (_m *KratosClientV5) GetUser(id string) (platformuser.KratosUser, error) {
	ret := _m.Called(id)

	var r0 platformuser.KratosUser
	if rf, ok := ret.Get(0).(func(string) platformuser.KratosUser); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(platformuser.KratosUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *KratosClientV5) GetUserByEmail(email string) (platformuser.KratosUser, error) {
	ret := _m.Called(email)

	var r0 platformuser.KratosUser
	if rf, ok := ret.Get(0).(func(string) platformuser.KratosUser); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(platformuser.KratosUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *KratosClientV5) GetUsers() ([]platformuser.KratosUser, error) {
	ret := _m.Called()

	var r0 []platformuser.KratosUser
	if rf, ok := ret.Get(0).(func() []platformuser.KratosUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platformuser.KratosUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveCustomerToUserByEmail provides a mock function with given fields: email, customerID
func (_m *KratosClientV5) RemoveCustomerToUserByEmail(email string, customerID string) error {
	ret := _m.Called(email, customerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *KratosClientV5) UpdateUser(user platformuser.KratosUser) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(platformuser.KratosUser) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKratosClientV5 interface {
	mock.TestingT
	Cleanup(func())
}

// NewKratosClientV5 creates a new instance of KratosClientV5. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKratosClientV5(t mockConstructorTestingTNewKratosClientV5) *KratosClientV5 {
	mock := &KratosClientV5{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
