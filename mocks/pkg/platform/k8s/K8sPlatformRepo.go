// Code generated by mockery v2.14.0. DO NOT EDIT.

package k8s

import (
	authorizationv1 "k8s.io/api/authorization/v1"
	corev1 "k8s.io/api/core/v1"

	http "net/http"

	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	networkingv1 "k8s.io/api/networking/v1"

	platform "github.com/dolittle/platform-api/pkg/platform"

	rest "k8s.io/client-go/rest"

	v1 "k8s.io/api/rbac/v1"
)

// K8sPlatformRepo is an autogenerated mock type for the K8sPlatformRepo type
type K8sPlatformRepo struct {
	mock.Mock
}

// AddPolicyRule provides a mock function with given fields: roleName, applicationID, newRule
func (_m *K8sPlatformRepo) AddPolicyRule(roleName string, applicationID string, newRule v1.PolicyRule) error {
	ret := _m.Called(roleName, applicationID, newRule)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, v1.PolicyRule) error); ok {
		r0 = rf(roleName, applicationID, newRule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddServiceAccount provides a mock function with given fields: serviceAccount, roleBinding, customerID, customerName, applicationID, applicationName
func (_m *K8sPlatformRepo) AddServiceAccount(serviceAccount string, roleBinding string, customerID string, customerName string, applicationID string, applicationName string) error {
	ret := _m.Called(serviceAccount, roleBinding, customerID, customerName, applicationID, applicationName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) error); ok {
		r0 = rf(serviceAccount, roleBinding, customerID, customerName, applicationID, applicationName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddServiceAccountToRoleBinding provides a mock function with given fields: logger, applicationID, roleBinding, serviceAccount
func (_m *K8sPlatformRepo) AddServiceAccountToRoleBinding(logger logrus.FieldLogger, applicationID string, roleBinding string, serviceAccount string) (*v1.RoleBinding, error) {
	ret := _m.Called(logger, applicationID, roleBinding, serviceAccount)

	var r0 *v1.RoleBinding
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger, string, string, string) *v1.RoleBinding); ok {
		r0 = rf(logger, applicationID, roleBinding, serviceAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RoleBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger, string, string, string) error); ok {
		r1 = rf(logger, applicationID, roleBinding, serviceAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanModifyApplication provides a mock function with given fields: customerID, applicationID, userID
func (_m *K8sPlatformRepo) CanModifyApplication(customerID string, applicationID string, userID string) (bool, error) {
	ret := _m.Called(customerID, applicationID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(customerID, applicationID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(customerID, applicationID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanModifyApplicationWithResourceAttributes provides a mock function with given fields: customerID, applicationID, userID, attribute
func (_m *K8sPlatformRepo) CanModifyApplicationWithResourceAttributes(customerID string, applicationID string, userID string, attribute authorizationv1.ResourceAttributes) (bool, error) {
	ret := _m.Called(customerID, applicationID, userID, attribute)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string, authorizationv1.ResourceAttributes) bool); ok {
		r0 = rf(customerID, applicationID, userID, attribute)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, authorizationv1.ResourceAttributes) error); ok {
		r1 = rf(customerID, applicationID, userID, attribute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanModifyApplicationWithResponse provides a mock function with given fields: w, customerID, applicationID, userID
func (_m *K8sPlatformRepo) CanModifyApplicationWithResponse(w http.ResponseWriter, customerID string, applicationID string, userID string) bool {
	ret := _m.Called(w, customerID, applicationID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, string, string, string) bool); ok {
		r0 = rf(w, customerID, applicationID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateRoleBinding provides a mock function with given fields: logger, customerID, customerName, applicationID, applicationName, roleBinding, role
func (_m *K8sPlatformRepo) CreateRoleBinding(logger logrus.FieldLogger, customerID string, customerName string, applicationID string, applicationName string, roleBinding string, role string) (*v1.RoleBinding, error) {
	ret := _m.Called(logger, customerID, customerName, applicationID, applicationName, roleBinding, role)

	var r0 *v1.RoleBinding
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger, string, string, string, string, string, string) *v1.RoleBinding); ok {
		r0 = rf(logger, customerID, customerName, applicationID, applicationName, roleBinding, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RoleBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger, string, string, string, string, string, string) error); ok {
		r1 = rf(logger, customerID, customerName, applicationID, applicationName, roleBinding, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceAccount provides a mock function with given fields: logger, customerID, customerName, applicationID, applicationName, serviceAccountName
func (_m *K8sPlatformRepo) CreateServiceAccount(logger logrus.FieldLogger, customerID string, customerName string, applicationID string, applicationName string, serviceAccountName string) (*corev1.ServiceAccount, error) {
	ret := _m.Called(logger, customerID, customerName, applicationID, applicationName, serviceAccountName)

	var r0 *corev1.ServiceAccount
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger, string, string, string, string, string) *corev1.ServiceAccount); ok {
		r0 = rf(logger, customerID, customerName, applicationID, applicationName, serviceAccountName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger, string, string, string, string, string) error); ok {
		r1 = rf(logger, customerID, customerName, applicationID, applicationName, serviceAccountName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceAccountFromResource provides a mock function with given fields: logContext, resource
func (_m *K8sPlatformRepo) CreateServiceAccountFromResource(logContext logrus.FieldLogger, resource *corev1.ServiceAccount) (*corev1.ServiceAccount, error) {
	ret := _m.Called(logContext, resource)

	var r0 *corev1.ServiceAccount
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger, *corev1.ServiceAccount) *corev1.ServiceAccount); ok {
		r0 = rf(logContext, resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger, *corev1.ServiceAccount) error); ok {
		r1 = rf(logContext, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: applicationID
func (_m *K8sPlatformRepo) GetApplication(applicationID string) (platform.Application, error) {
	ret := _m.Called(applicationID)

	var r0 platform.Application
	if rf, ok := ret.Get(0).(func(string) platform.Application); ok {
		r0 = rf(applicationID)
	} else {
		r0 = ret.Get(0).(platform.Application)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplications provides a mock function with given fields: customerID
func (_m *K8sPlatformRepo) GetApplications(customerID string) ([]platform.ShortInfo, error) {
	ret := _m.Called(customerID)

	var r0 []platform.ShortInfo
	if rf, ok := ret.Get(0).(func(string) []platform.ShortInfo); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platform.ShortInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigMap provides a mock function with given fields: applicationID, name
func (_m *K8sPlatformRepo) GetConfigMap(applicationID string, name string) (*corev1.ConfigMap, error) {
	ret := _m.Called(applicationID, name)

	var r0 *corev1.ConfigMap
	if rf, ok := ret.Get(0).(func(string, string) *corev1.ConfigMap); ok {
		r0 = rf(applicationID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ConfigMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(applicationID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIngressHTTPIngressPath provides a mock function with given fields: ingresses, microserviceID
func (_m *K8sPlatformRepo) GetIngressHTTPIngressPath(ingresses []networkingv1.Ingress, microserviceID string) ([]networkingv1.HTTPIngressPath, error) {
	ret := _m.Called(ingresses, microserviceID)

	var r0 []networkingv1.HTTPIngressPath
	if rf, ok := ret.Get(0).(func([]networkingv1.Ingress, string) []networkingv1.HTTPIngressPath); ok {
		r0 = rf(ingresses, microserviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]networkingv1.HTTPIngressPath)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]networkingv1.Ingress, string) error); ok {
		r1 = rf(ingresses, microserviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIngressURLsWithCustomerTenantID provides a mock function with given fields: ingresses, microserviceID
func (_m *K8sPlatformRepo) GetIngressURLsWithCustomerTenantID(ingresses []networkingv1.Ingress, microserviceID string) ([]platform.IngressURLWithCustomerTenantID, error) {
	ret := _m.Called(ingresses, microserviceID)

	var r0 []platform.IngressURLWithCustomerTenantID
	if rf, ok := ret.Get(0).(func([]networkingv1.Ingress, string) []platform.IngressURLWithCustomerTenantID); ok {
		r0 = rf(ingresses, microserviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platform.IngressURLWithCustomerTenantID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]networkingv1.Ingress, string) error); ok {
		r1 = rf(ingresses, microserviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: applicationID, containerName, podName
func (_m *K8sPlatformRepo) GetLogs(applicationID string, containerName string, podName string) (string, error) {
	ret := _m.Called(applicationID, containerName, podName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(applicationID, containerName, podName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(applicationID, containerName, podName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMicroserviceDNS provides a mock function with given fields: applicationID, microserviceID
func (_m *K8sPlatformRepo) GetMicroserviceDNS(applicationID string, microserviceID string) (string, error) {
	ret := _m.Called(applicationID, microserviceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(applicationID, microserviceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(applicationID, microserviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMicroserviceName provides a mock function with given fields: applicationID, environment, microserviceID
func (_m *K8sPlatformRepo) GetMicroserviceName(applicationID string, environment string, microserviceID string) (string, error) {
	ret := _m.Called(applicationID, environment, microserviceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(applicationID, environment, microserviceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(applicationID, environment, microserviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMicroservices provides a mock function with given fields: applicationID
func (_m *K8sPlatformRepo) GetMicroservices(applicationID string) ([]platform.MicroserviceInfo, error) {
	ret := _m.Called(applicationID)

	var r0 []platform.MicroserviceInfo
	if rf, ok := ret.Get(0).(func(string) []platform.MicroserviceInfo); ok {
		r0 = rf(applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]platform.MicroserviceInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPodStatus provides a mock function with given fields: applicationID, environment, microserviceID
func (_m *K8sPlatformRepo) GetPodStatus(applicationID string, environment string, microserviceID string) (platform.PodData, error) {
	ret := _m.Called(applicationID, environment, microserviceID)

	var r0 platform.PodData
	if rf, ok := ret.Get(0).(func(string, string, string) platform.PodData); ok {
		r0 = rf(applicationID, environment, microserviceID)
	} else {
		r0 = ret.Get(0).(platform.PodData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(applicationID, environment, microserviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestConfig provides a mock function with given fields:
func (_m *K8sPlatformRepo) GetRestConfig() *rest.Config {
	ret := _m.Called()

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}

// GetSecret provides a mock function with given fields: logContext, applicationID, name
func (_m *K8sPlatformRepo) GetSecret(logContext logrus.FieldLogger, applicationID string, name string) (*corev1.Secret, error) {
	ret := _m.Called(logContext, applicationID, name)

	var r0 *corev1.Secret
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger, string, string) *corev1.Secret); ok {
		r0 = rf(logContext, applicationID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger, string, string) error); ok {
		r1 = rf(logContext, applicationID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAccount provides a mock function with given fields: logContext, applicationID, name
func (_m *K8sPlatformRepo) GetServiceAccount(logContext logrus.FieldLogger, applicationID string, name string) (*corev1.ServiceAccount, error) {
	ret := _m.Called(logContext, applicationID, name)

	var r0 *corev1.ServiceAccount
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger, string, string) *corev1.ServiceAccount); ok {
		r0 = rf(logContext, applicationID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger, string, string) error); ok {
		r1 = rf(logContext, applicationID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSpecificSubjectRulesReviewStatus provides a mock function with given fields: applicationID, groupID, userID
func (_m *K8sPlatformRepo) GetUserSpecificSubjectRulesReviewStatus(applicationID string, groupID string, userID string) (authorizationv1.SubjectRulesReviewStatus, error) {
	ret := _m.Called(applicationID, groupID, userID)

	var r0 authorizationv1.SubjectRulesReviewStatus
	if rf, ok := ret.Get(0).(func(string, string, string) authorizationv1.SubjectRulesReviewStatus); ok {
		r0 = rf(applicationID, groupID, userID)
	} else {
		r0 = ret.Get(0).(authorizationv1.SubjectRulesReviewStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(applicationID, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePolicyRule provides a mock function with given fields: roleName, applicationID, newRule
func (_m *K8sPlatformRepo) RemovePolicyRule(roleName string, applicationID string, newRule v1.PolicyRule) error {
	ret := _m.Called(roleName, applicationID, newRule)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, v1.PolicyRule) error); ok {
		r0 = rf(roleName, applicationID, newRule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestartMicroservice provides a mock function with given fields: applicationID, environment, microserviceID
func (_m *K8sPlatformRepo) RestartMicroservice(applicationID string, environment string, microserviceID string) error {
	ret := _m.Called(applicationID, environment, microserviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(applicationID, environment, microserviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteConfigMap provides a mock function with given fields: configMap
func (_m *K8sPlatformRepo) WriteConfigMap(configMap *corev1.ConfigMap) (*corev1.ConfigMap, error) {
	ret := _m.Called(configMap)

	var r0 *corev1.ConfigMap
	if rf, ok := ret.Get(0).(func(*corev1.ConfigMap) *corev1.ConfigMap); ok {
		r0 = rf(configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ConfigMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*corev1.ConfigMap) error); ok {
		r1 = rf(configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteSecret provides a mock function with given fields: secret
func (_m *K8sPlatformRepo) WriteSecret(secret *corev1.Secret) (*corev1.Secret, error) {
	ret := _m.Called(secret)

	var r0 *corev1.Secret
	if rf, ok := ret.Get(0).(func(*corev1.Secret) *corev1.Secret); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*corev1.Secret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewK8sPlatformRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewK8sPlatformRepo creates a new instance of K8sPlatformRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewK8sPlatformRepo(t mockConstructorTestingTNewK8sPlatformRepo) *K8sPlatformRepo {
	mock := &K8sPlatformRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
