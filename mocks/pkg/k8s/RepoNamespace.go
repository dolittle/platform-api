// Code generated by mockery v2.12.2. DO NOT EDIT.

package k8s

import (
	mock "github.com/stretchr/testify/mock"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	testing "testing"

	v1 "k8s.io/api/core/v1"
)

// RepoNamespace is an autogenerated mock type for the RepoNamespace type
type RepoNamespace struct {
	mock.Mock
}

// GetNamespaces provides a mock function with given fields:
func (_m *RepoNamespace) GetNamespaces() ([]v1.Namespace, error) {
	ret := _m.Called()

	var r0 []v1.Namespace
	if rf, ok := ret.Get(0).(func() []v1.Namespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespacesWithApplication provides a mock function with given fields:
func (_m *RepoNamespace) GetNamespacesWithApplication() ([]v1.Namespace, error) {
	ret := _m.Called()

	var r0 []v1.Namespace
	if rf, ok := ret.Get(0).(func() []v1.Namespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespacesWithOptions provides a mock function with given fields: opts
func (_m *RepoNamespace) GetNamespacesWithOptions(opts metav1.ListOptions) ([]v1.Namespace, error) {
	ret := _m.Called(opts)

	var r0 []v1.Namespace
	if rf, ok := ret.Get(0).(func(metav1.ListOptions) []v1.Namespace); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metav1.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepoNamespace creates a new instance of RepoNamespace. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoNamespace(t testing.TB) *RepoNamespace {
	mock := &RepoNamespace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
