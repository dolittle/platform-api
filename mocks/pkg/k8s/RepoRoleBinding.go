// Code generated by mockery v2.14.0. DO NOT EDIT.

package k8s

import (
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/rbac/v1"
)

// RepoRoleBinding is an autogenerated mock type for the RepoRoleBinding type
type RepoRoleBinding struct {
	mock.Mock
}

// AddSubjectToRoleBinding provides a mock function with given fields: namespace, name, subject
func (_m *RepoRoleBinding) AddSubjectToRoleBinding(namespace string, name string, subject v1.Subject) error {
	ret := _m.Called(namespace, name, subject)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, v1.Subject) error); ok {
		r0 = rf(namespace, name, subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRoleBinding provides a mock function with given fields: namespace, name
func (_m *RepoRoleBinding) GetRoleBinding(namespace string, name string) (v1.RoleBinding, error) {
	ret := _m.Called(namespace, name)

	var r0 v1.RoleBinding
	if rf, ok := ret.Get(0).(func(string, string) v1.RoleBinding); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Get(0).(v1.RoleBinding)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserAdminAccess provides a mock function with given fields: userID
func (_m *RepoRoleBinding) HasUserAdminAccess(userID string) (bool, error) {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSubjectToRoleBinding provides a mock function with given fields: namespace, name, subject
func (_m *RepoRoleBinding) RemoveSubjectToRoleBinding(namespace string, name string, subject v1.Subject) error {
	ret := _m.Called(namespace, name, subject)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, v1.Subject) error); ok {
		r0 = rf(namespace, name, subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepoRoleBinding interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoRoleBinding creates a new instance of RepoRoleBinding. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoRoleBinding(t mockConstructorTestingTNewRepoRoleBinding) *RepoRoleBinding {
	mock := &RepoRoleBinding{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
